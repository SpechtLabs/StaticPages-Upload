name: 'StaticPages Upload'
description: 'Upload a static website to your self-hosted Static Pages instance using GitHub OIDC authentication.'

inputs:
  endpoint:
    description: 'Base URL of your Static Pages API (e.g., staticpages.example.com or https://staticpages.example.com)'
    required: true

  site-dir:
    description: 'Path to the directory containing the generated static site to upload'
    required: true

  verbose:
    description: 'Enable verbose upload output (true/false)'
    required: false
    default: 'false'

outputs:
  uploaded-count:
    description: 'The number of files uploaded'
    value: ${{ steps.upload.outputs.uploaded-count }}

runs:
  using: 'composite'
  steps:
    - name: Normalize URL and fetch ID token
      id: prepare
      uses: actions/github-script@v7
      with:
        debug: false
        script: |
          let url = '${{ inputs.endpoint }}';

          // Ensure it has a protocol
          if (!url.match(/^https?:\/\//)) {
            url = 'https://' + url;
          }

          // Remove trailing slashes
          url = url.replace(/\/+$/, '');

          // Append /upload if not already present
          if (!url.endsWith('/api/upload')) {
            url += '/api/upload';
          }

          const idToken = await core.getIDToken();

          core.setOutput('uploadApiEndpoint', url);
          core.setOutput('idtoken', idToken);

    - name: Upload static site artifacts
      id: upload
      shell: bash
      run: |
        URL="${{ steps.prepare.outputs.uploadApiEndpoint }}"
        IDTOKEN="${{ steps.prepare.outputs.idtoken }}"
        VERBOSE="${{ inputs.verbose }}"
        UPLOAD_DIR="${{ inputs.site-dir }}"

        [[ "$VERBOSE" == "true" ]] && CURL_OPTS="-v" || CURL_OPTS="--silent"

        # Build curl arguments for multipart/form-data, preserving relative paths
        CURL_ARGS=()
        while IFS= read -r -d '' file; do
          relpath="${file#$UPLOAD_DIR}" # Remove the base directory from the path
          CURL_ARGS+=("-F" "files[${relpath}]=@${file}")
        done < <(find $UPLOAD_DIR -type f -print0)

        FILE_COUNT="${#CURL_ARGS[@]}"
        echo "Uploading $FILE_COUNT files to $URL..."

        # Upload and capture response
        HTTP_RESPONSE=$(mktemp)
        HTTP_CODE=$(curl $CURL_OPTS \
          -X POST "$URL" \
          -H "Authorization: Bearer $IDTOKEN" \
          "${CURL_ARGS[@]}" \
          -w "%{http_code}" \
          -o "$HTTP_RESPONSE")

        echo "Server responded with HTTP $HTTP_CODE"
        if [[ "$HTTP_CODE" == "200" ]]; then
          echo "### ✅ Static site uploaded successfully" >> "$GITHUB_STEP_SUMMARY"
          echo "- Files uploaded: $FILE_COUNT" >> "$GITHUB_STEP_SUMMARY"

          MAIN_URL=$(jq -r '.url // empty' "$HTTP_RESPONSE")
          if [[ -n "$MAIN_URL" ]]; then
            echo "- Main URL: $MAIN_URL" >> "$GITHUB_STEP_SUMMARY"
          fi

          PREVIEWS=$(jq -r '.preview_url[]? // empty' "$HTTP_RESPONSE")
          if [[ -n "$PREVIEWS" ]]; then
            echo "- Preview URLs:" >> "$GITHUB_STEP_SUMMARY"
            while IFS= read -r preview; do
              echo "  - $preview" >> "$GITHUB_STEP_SUMMARY"
            done <<< "$PREVIEWS"
          fi

          jq . "$HTTP_RESPONSE" || cat "$HTTP_RESPONSE"
        else
          echo "### ❌ Upload failed" >> "$GITHUB_STEP_SUMMARY"
          echo "- HTTP code: $HTTP_CODE" >> "$GITHUB_STEP_SUMMARY"
          echo "- Error message: $(jq -r '.error // "unknown error"' "$HTTP_RESPONSE" 2>/dev/null || cat "$HTTP_RESPONSE")" >> "$GITHUB_STEP_SUMMARY"
          cat "$HTTP_RESPONSE" >&2
          exit 1
        fi
