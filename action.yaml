name: 'StaticPages Upload'
description: 'upload a html generated by your static page generator of choice to your self-hosted Static Pages instance'
inputs:
  apiUrl:
    description: 'The API Endpoint of your Static Pages instance'
    required: true

  dir:
    description: 'The directory containing the static files to upload'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Prepare API URL and fetch ID token
      uses: actions/github-script@v7
      id: prepare
      with:
        debug: false
        script: |
          let url = '${{ inputs.apiUrl }}';

          // Ensure it has a protocol
          if (!url.match(/^https?:\/\//)) {
            url = 'https://' + url;
          }

          // Remove trailing slashes
          url = url.replace(/\/+$/, '');

          // Append /upload if not present
          if (!url.endsWith('/upload')) {
            url += '/upload';
          }

          // Get GitHub-issued OIDC token
          const idToken = await core.getIDToken();

          core.setOutput('uploadApiEndpoint', url);
          core.setOutput('idtoken', idToken);

    - name: Upload static site artifacts
      shell: bash
      run: |
        set -euo pipefail

        # Build curl arguments for multipart/form-data, preserving relative paths
        CURL_ARGS=()
        while IFS= read -r -d '' file; do
          relpath="${file#${{ inputs.dir }}}"
          CURL_ARGS+=("-F" "files[${relpath}]=@${file}")
        done < <(find ${{ inputs.dir }} -type f -print0)

        echo "Uploading ${#CURL_ARGS[@]} files..."

        # Upload to your REST API
        curl -v -X POST "${{ steps.prepare.outputs.uploadApiEndpoint }}" \
          -H "Authorization: Bearer ${{ steps.prepare.outputs.idtoken }}" \
          "${CURL_ARGS[@]}"